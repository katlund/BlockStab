function gen_kappa_s_plots(run_data, new_dir_str)
% GEN_KAPPA_S_PLOTS(run_data, new_dir_str) is a subroutine that generates
% plots for RUNKAPPASPLOT given a run_data struct; if new_dir_str is not
% provided, then the one saved in the .mat file specified by save_str is
% used.
%
% Part of [BlockStab](https://github.com/katlund) package.  Check README
% for how to properly cite and reuse this file.

%%
% Load run_data
n_alg = length(run_data.lgd);
if nargin == 2
    run_data.dir_str = new_dir_str;
end

% Pull out options
options = run_data.options;

% Plot data
n_s = length(run_data.block_size);
n_mat = length(run_data.condXX);
for i = 1:n_mat
    % Initialize figures and axes
    fg = cell(1,3);
    ax = cell(1,3);
    for k = 1:3
        fg{k} = figure;
        fg{k}.Position(3) = 700; % slightly stretches horizontally
        ax{k} = gca;
        hold on;
    end

    for j = 1:n_alg
        plot(ax{1}, run_data.block_size, reshape(run_data.loss_ortho(i,j,:), 1, n_s),...
            run_data.symb{j}, 'Color', run_data.alg_cmap(j,:), ...
            'MarkerSize', 10, 'LineWidth', 1);
        plot(ax{2}, run_data.block_size, reshape(run_data.rel_res(i,j,:), 1, n_s),... 
            run_data.symb{j}, 'Color', run_data.alg_cmap(j,:), ...
            'MarkerSize', 10, 'LineWidth', 1);
        plot(ax{3}, run_data.block_size, reshape(run_data.rel_chol_res(i,j,:), 1, n_s),...
            run_data.symb{j}, 'Color', run_data.alg_cmap(j,:), ...
            'MarkerSize', 10, 'LineWidth', 1);
    end

    % Make plots pretty and save them
    plot_str = {'loss_ortho', 'rel_res', 'rel_chol_res'};
    for k = 1:3
        % Aesthetics
        set(ax{k}, 'Xscale', 'log', 'Yscale', 'log', ...
            'XGrid', 'on', 'YGrid', 'on', ...
            'XMinorGrid', 'off', 'YMinorGrid', 'off', ...
            'FontSize', 12);

        % X-axis label
        xlabel(ax{k}, '$s$', ...
            'Interpreter', 'Latex', ...
            'FontSize', 12)

        % Legends and titles
        if k == 1
            legend(ax{k}, run_data.lgd, 'Location', 'BestOutside', ...
                'Interpreter', 'Latex', ...
                'FontSize', 14, ...
                'EdgeColor','none', ...
                'Color','none');
            title(ax{k}, ...
                'Loss of Orthogonality', ...
                '$\Vert I - \bar\mathcal{Q}^T \bar\mathcal{Q}\Vert$', ...
                'Interpreter', 'Latex', ...
                'FontSize', 14);
            movegui(fg{1},'northwest')
        elseif k == 2
            legend(ax{k}, run_data.lgd, 'Location', 'BestOutside', ...
                'Interpreter', 'Latex', ...
                'FontSize', 14, ...
                'EdgeColor', 'none', ...
                'Color', 'none');
            title(ax{k}, ...
                'Relative Residual', ...
                ['$\Vert \mathcal{X} - ' ...
                '\bar\mathcal{Q}\bar\mathcal{R}\Vert/\Vert X\Vert$'], ...
                'Interpreter', 'Latex', ...
                'FontSize', 14);
            movegui(fg{2},'northeast')
        elseif k == 3
            legend(ax{k}, run_data.lgd, 'Location', 'BestOutside', ...
                'Interpreter', 'Latex', ...
                'FontSize', 14, ...
                'EdgeColor', 'none', ...
                'Color', 'none');
            title(ax{k}, ...
                'Relative Cholesky Residual', ...
                ['$\Vert \mathcal{X}^T \mathcal{X} - ' ...
                '\bar\mathcal{R}^T \bar\mathcal{R}\Vert/ ' ...
                '\Vert \mathcal{X}\Vert^2$'], ...
                'Interpreter', 'Latex', ...
                'FontSize', 14);
            movegui(fg{3},'south')
        end

        % Save figures
        save_str = sprintf('%s/mat_%d_%s', run_data.dir_str, i, plot_str{k});
        if options.save_eps
            saveas(fg{k}, save_str, 'epsc');
        end

        if options.save_pdf
            exportgraphics(fg{k}, [save_str '.pdf'],'BackgroundColor','none')
        end

        if options.save_fig
            savefig(fg{k}, save_str, 'compact');
        end
    end
    close all;
end

% Plot 3D figures of LOO per method
x = run_data.condXX;
y = run_data.block_size;
fg_surf = cell(1,n_alg);
ax_surf = cell(1,n_alg);
for j = 1:n_alg
    Z = reshape(run_data.loss_ortho(:,j,:), n_mat, n_s)';

    fg_surf{j} = figure;
    ax_surf{j} = gca;
    surf(ax_surf{j}, x, y, Z)
    set(ax_surf{j}, 'Xscale', 'log', 'Yscale', 'log', 'Zscale', 'log')
    xlabel(ax_surf{j}, '$\kappa(\mathcal{X})$', ...
        'Interpreter', 'Latex', ...
        'FontSize', 12)
    ylabel(ax_surf{j}, '$s$', ...
        'Interpreter', 'Latex', ...
        'FontSize', 12)
    zlabel(ax_surf{j}, '$\Vert I - \bar\mathcal{Q}^T \bar\mathcal{Q}\Vert$', ...
        'Interpreter', 'Latex', ...
        'FontSize', 12)
    title(ax_surf{j}, run_data.lgd{j}, ...
        'Interpreter', 'Latex', ...
        'FontSize', 14)
    view(ax_surf{j}, [90 0]);

    save_str = sprintf('%s/alg%d_loss_ortho', run_data.dir_str, j);
    savefig(fg_surf{j}, save_str, 'compact');
end

% Print where figures are saved
fprintf('Files saved in %s\n', run_data.dir_str);